Dubois Yann
S3 Informatique G4

TP 1 :

légende :
	x(10) = x en décimal
	x(2) = x en binaire	
	x(8) = x en octal
	x(16) = x en héxadécimal

1.2 Choix de la base

Exercice 1 :
	Q1 :	1(10) = 1(2)
		10(10) = 1010(2)
		100(10) = 1100100(2)
		1000(10) = 1111101000(2)
		10000(10) = 10011100010000(2)

	Q2 :	1(2) = 1(10)
		10(2) = 2(10)
		100(2) = 4(10)
		1000(2) = 8(10)
		10000(2) = 16(10)

	Q3 :	1(8) = 1(2)
		10(8) = 1000(2)
		100(8) = 1000000(2)
		1000(8) = 1000000000(2)
		10000(8) = 1000000000000(2)

		1(16) = 1(2)
		10(16) = 10000(2)
		100(16) = 100000000(2)
		1000(16) = 1000000000000(2)
		10000(16) = 10000000000000000(2)
Exercice 2 :
	Q1 : pour t nombres en héxadécimal :

	 	t = 1 : 15(10) / F(16)
		t = 2 : 255(10) / FF(16)
		t = 3 : 4095(10) / FFF(16)
		t = 4 : 65535(10) / FFFF(16)
		t = 5 : 1048575(10) / FFFFF(16)
		t = 6 : 16777215(10) / FFFFFF(16)
		t = 7 : 268435455(10) / FFFFFFF(16)
		t = 8 : 4294967295(10) / FFFFFFFF(16)
		t = 9 : 68719476735(10) / FFFFFFFFF(16)
		t = 10 : 1,099511628×10¹²(10) / FFFFFFFFFF(16)

	Q2 : 	pour t nombre en octal
		
		t = 1 : 8(10) / 7(8)
		t = 2 : 63(10) / 77(8)
		t = 3 : 511(10) / 777(8)
		t = 4 : 4095(10) / 7777(8)
		t = 5 : 32767(10) / 77777(8)
		t = 6 : 262143(10) / 777777(8)
		t = 7 : 2097151(10) / 7777777(8)
		t = 8 : 16777215(10) / 77777777(8)
		t = 9 : 134217727(10) / 777777777(8)
		t = 10 : 1073741823(10) / 7777777777(8)
		
		pour t nombre en décimal

		t = 1 : 1(10) / 1(2)
		t = 2 : 3(10) / 11(2)
		t = 3 : 7(10) / 111(2)
		t = 4 : 15(10) / 1111(2)
		t = 5 : 31(10) / 11111(2)
		t = 6 : 63(10) / 111111(2)
		t = 7 : 127(10) / 1111111(2)
		t = 8 : 255(10) / 11111111(2)
		t = 9 : 511(10) / 111111111(2)
		t = 10 : 1023(10) / 1111111111(2)

1.3 Opérations arithmétiques

Exercice 3 :
	L'exercice 5 nous demande de calculer le carré d'un nombre binaire du style : 10...01(2) (... = nombre de 0 (on notera cette valeur n). Soit x un nombre binaire sous la forme présenté précédement :
	x*x = 1..1....1 (.. : n - 1 | .... : n + 1)
	x*x*x = 1..11..11...1 (.. : n - 1 | ... : n)

1.4 Opérations logiques

Exercice 4
	Q1 : 	1) a = 12; b = 6 
		a xor b = b xor a = 10 donc xor est commutatif
		
		2) a xor 0 = 0 xor a = 12 donc xor admet un élement neutre
		
		3) il existe un a tels que a xor 5 = 0, a = 5. Mais ça fonctionne uniquement dans ce cas précis, plus généralement on peut écrire : a xor x = 0 implique que a = x

	Q2 : 	On crée une table de vérité pour l'opération xor :

			a	b	S
			0	0	0
			0	1	1
			1	1	0
			1	0	1
		
		xor correspond au "ou exclusif" la table de vérité nous montre comment se comporte le xor dans une opération, par exemple :
		1100 xor 0110 = 1010
		
		xor fonctionne de lla même manière qu'une addition à l'exception qu'il n'existe aucune retenu et que 1 xor 1 = 0

Exercice 5 :
	
	AND : (a = 12; b = 6)

	1) a and b = b and a = 4
	2) a and a  = a (en décimal, l'élément neutre est défini par les paramètres de l'opération)
	3) a and 0 = 0 (propriété vrai pour tout a)

	table de vérité :
		
		a	b	S
		0	0	0
		0	1	0
		1	1	1
		1	0	0

	le and agit de la même façon qu'une multiplication par bits 0par exemple :
	1100 and 0110 = 0100

	OR : (a = 12; b = 6)

	1) a or b = b or a = 14
	2) a or a  = a or 0 (en décimal, l'élément neutre est défini par les paramètres de l'opération ou par 0 pour tout a)
	3) a or 0 = 0 uniquement si a = 0

	table de vérité :
		
		a	b	S
		0	0	0
		0	1	1
		1	1	1
		1	0	1

	le or agit de la même façon qu'une addition à l'exeption de 1 or 1 qui est la seul opération agissant comme la multiplication par bits par exemple :
	1100 or 0110 = 1110
	
Exercice 6 :
	
	Q1 :
		LSH : (a = 12)
		
		Quand b = 1 : a lsh b = 24
		Quand b = 2 : a lsh b = 48
		Quand b = 3 : a lsh b = 96
	
	Q2 :
		Quand b = 1 : 1100 lsh 1 = 11000
		Quand b = 1 : 1100 lsh 10 = 11000
		Quand b = 1 : 1100 lsh 100 = 11000
		
		On ajoute un bit de poid faible égale à 0 et on décale tout les autres bits à gauche
		
2.1 Trois fichiers contenant un texte :

	Exercice 7 :
	
	Q2 : Le fichier odt semble crypter en utilisant notepad++, sinon il n'y a aucune différence.
	
	Q3 : Il n'y a pas de problème d'encodage, mais le fichier odt est un fichier stylisé, on remarque un changement de police et de taille de police.
	
	Q4 : 
		cigale1.odt = 16971 octets
		cigale1.txt = 624 octets
		cigale2.txt = 648 octets
		
	Q5-1 :
		Le texte n'est pas reconnaissable pour le fichier odt, par contre il nous est plus simple de reconnaître le texte pour les fichiers cigale1.txt et cigale2.txt.
		
	Q5-2
		Les passages à la ligne pour cigale2.txt se font avec les code héxadécimaux 0d 0a alors que dans cigale1.txt, ce retour à la ligne se fait seulement avec 0a.
		
2.2 2 fichiers contenant une image

	Q2 : Il n'y a aucune différence visuel entre les 2 images.
	
	Q3 : 
		adage.bmp = 82874 octets
		adage.gif = 5057 octets
		
		Le format gif est moins couteux que le format bmp.
		
	Q4 :
		Il semblerait que le fichier bmp se contente de donner une place à chauqe pixel, tandis que le fichier gif a une structure beaucoup plus complexe
		
	Q5 :
		On observe que certain pixel on changer de couleur
		
	Q6 :
		Je n'ai changé qu'une seule valeur et tout les pixels se sont décalé vers la gauche. Le format GIF utilise un algorithme de compression, ce qui implique qu'on réduit le plus possible les données que peut contenir une image, d'où le décalage.